openapi: 3.0.0
info:
  title: "dojin_api"
  version: "1.0.0"
  contact:
    name: ScTi

security:
  - BearerAuth: []

paths:
  /author:
    get:
      operationId: get_auther_list
      summary: getAuthorList
      description: 著者リストを取得する
      tags: ["author"]
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  authors:
                    $ref: '#/components/schemas/AuthorBaseMulti'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      operationId: create_author
      summary: createAuthor
      description: 著者を新規登録する
      tags: ["author"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
            example:
              name: "ScTi"
              memo: "東方ばっかり出す"
              author_alias:
                - "2"
                - "4"

      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorBase'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/ServerError'

  /author/{author_id}:
    get:
      operationId: get_author
      summary: getAuthor
      description: 著者情報を取得する
      tags: ["author"]
      parameters:
        - name: author_id
          in: path
          description: 著者ID
          schema: {type: string}
          required: true
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    put:
      operationId: update_author
      summary: updateAuthor
      description: 著者情報を更新する
      tags: ["author"]
      parameters:
        - name: author_id
          in: path
          description: 著者ID
          schema: {type: string}
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
            example:
              name: "ScTi"
              memo: "東方ばっかり出す"
              author_alias:
                - "2"
                - "4"

      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorBase'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: delete_author
      summary: deleteAuthor
      description: 著者情報を削除する
      tags: ["author"]
      parameters:
        - name: author_id
          in: path
          description: 著者ID
          schema: {type: string}
          required: true
      responses:
        200:
          description: "成功"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'

  /circle:
    get:
      operationId: get_circle_list
      summary: getCirlceList
      description: サークルリストを取得する
      tags: ["circle"]
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  circles:
                    $ref: '#/components/schemas/CircleBaseMulti'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      operationId: create_circle
      summary: createCircle
      description: サークルを新規登録する
      tags: ["circle"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Circle'
            example:
              name: "元素評論部族"
              memo: "東方ばっかり出す"
              authors:
                - "1"
                - "3"
              circle_alias:
                - "2"
                - "4"

      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CircleBase'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/ServerError'

  /circle/{circle_id}:
    get:
      operationId: get_circle
      summary: getCircle
      description: サークル情報を取得する
      tags: ["circle"]
      parameters:
        - name: circle_id
          in: path
          description: サークルID
          schema: {type: string}
          required: true
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Circle'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    put:
      operationId: update_circle
      summary: updateCircle
      description: サークル情報を更新する
      tags: ["circle"]
      parameters:
        - name: circle_id
          in: path
          description: サークルID
          schema: {type: string}
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Circle'
            example:
              name: "元素評論部族"
              memo: "東方ばっかり出す"
              authors:
                - "1"
                - "3"
              circle_alias:
                - "2"
                - "4"

      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CircleBase'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: delete_circle
      summary: deleteCircle
      description: サークルを削除する
      tags: ["circle"]
      parameters:
        - name: circle_id
          in: path
          description: サークルID
          schema: {type: string}
          required: true
      responses:
        200:
          description: "成功"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'

  /event:
    get:
      operationId: get_event_list
      summary: getEventList
      description: イベントリストを取得する
      tags: ["event"]
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    $ref: '#/components/schemas/EventBaseMulti'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      operationId: create_event
      summary: createEvent
      description: イベントを新規登録する
      tags: ["event"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
            example:
              name: "第一回博麗神社例大祭"
              memo: "東方イベント"
              held_at: "2024-04-29T08:24:16.571Z"
              location: "東京ビックサイト"
              event_series: "1"

      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventBase'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/ServerError'

  /event/{event_id}:
    get:
      operationId: get_event
      summary: getEvent
      description: イベント情報を取得する
      tags: ["event"]
      parameters:
        - name: event_id
          in: path
          description: イベントID
          schema: {type: string}
          required: true
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    put:
      operationId: update_event
      summary: updateEvent
      description: イベント情報を更新する
      tags: ["event"]
      parameters:
        - name: event_id
          in: path
          description: イベントID
          schema: {type: string}
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
            example:
              name: "第一回博麗神社例大祭"
              memo: "東方イベント"
              held_at: "2024-04-29T08:24:16.571Z"
              location: "東京ビックサイト"
              event_series: "1"

      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventBase'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: delete_event
      summary: deleteEvent
      description: イベントを削除する
      tags: ["event"]
      parameters:
        - name: event_id
          in: path
          description: イベントID
          schema: {type: string}
          required: true
      responses:
        200:
          description: "成功"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'

  /eventseries:
    get:
      operationId: get_event_series_list
      summary: getEventSeriesList
      description: イベントシリーズリストを取得する
      tags: ["event"]
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  event_series:
                    $ref: '#/components/schemas/EventSeriesBaseMulti'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      operationId: create_event_series
      summary: createEventSeries
      description: イベントシリーズを新規作成する
      tags: ["event"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSeries'
            example:
              name: "博麗神社例大祭"
              memo: "東方系のイベント"

      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSeriesBase'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/ServerError'
  
  /eventseries/{event_series_id}:
    get:
      operationId: get_event_series
      summary: getEventSeries
      description: イベントシリーズ情報を取得する
      tags: ["event"]
      parameters:
        - name: event_series_id
          in: path
          description: イベントシリーズID
          schema: {type: string}
          required: true
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSeries'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    put:
      operationId: update_event_series
      summary: updateEventSeries
      description: イベントシリーズ情報を更新する
      tags: ["event"]
      parameters:
        - name: event_series_id
          in: path
          description: イベントシリーズID
          schema: {type: string}
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSeries'
            example:
              name: "博麗神社例大祭"
              memo: "東方系のイベント"

      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSeriesBase'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: delete_event_series
      summary: deleteEventSeries
      description: イベントシリーズを削除する
      tags: ["event"]
      parameters:
        - name: event_series_id
          in: path
          description: イベントシリーズID
          schema: {type: string}
          required: true
      responses:
        200:
          description: "成功"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'

  /original:
    get:
      operationId: get_original_list
      summary: getOriginalList
      description: 原作リストを取得する
      tags: ["original"]
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  event_series:
                    $ref: '#/components/schemas/OriginalBaseMulti'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      operationId: create_original
      summary: createOriginal
      description: 原作を新規登録する
      tags: ["original"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Original'
            example:
              name: "東方"
              memo: "ゆうめいなやつ"
              parent_original: "1"

      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OriginalBase'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/ServerError'

  /original/{original_id}:
    get:
      operationId: get_original
      summary: getOriginal
      description: 原作情報を取得する
      tags: ["original"]
      parameters:
        - name: original_id
          in: path
          description: 原作ID
          schema: {type: string}
          required: true
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Original'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    put:
      operationId: update_original
      summary: updateOriginal
      description: 原作の詳細情報を更新する
      tags: ["original"]
      parameters:
        - name: original_id
          in: path
          description: 原作ID
          schema: {type: string}
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Original'
            example:
              name: "東方"
              memo: "ゆうめいなやつ"
              parent_original: "1"

      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OriginalBase'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: delete_original
      summary: deleteOriginal
      description: 原作を削除する
      tags: ["original"]
      parameters:
        - name: original_id
          in: path
          description: 原作ID
          schema: {type: string}
          required: true
      responses:
        200:
          description: "成功"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'

  /character:
    get:
      operationId: get_character_list
      summary: getCharacterList
      description: キャラクターリストを取得する
      tags: ["character"]
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  characters:
                    $ref: '#/components/schemas/CharacterBaseMulti'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      operationId: create_character
      summary: createCharacter
      description: キャラクターを新規登録する
      tags: ["character"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
            example:
              name: "古明地さとり"
              memo: "地霊殿にいる"
              original: "1"
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterBase'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/ServerError'

  /character/{character_id}:
    get:
      operationId: get_character
      summary: getCharacter
      description: キャラクター情報を取得する
      tags: ["character"]
      parameters:
        - name: character_id
          in: path
          description: キャラクターID
          schema: {type: string}
          required: true
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    put:
      operationId: update_character
      summary: updateCharacter
      description: キャラクター情報を更新する
      tags: ["character"]
      parameters:
        - name: character_id
          in: path
          description: キャラクターID
          schema: {type: string}
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
            example:
              name: "古明地さとり"
              memo: "地霊殿にいる"
              original: "1"
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterBase'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: delete_character
      summary: deleteCharacter
      description: キャラクターを削除する
      tags: ["character"]
      parameters:
        - name: character_id
          in: path
          description: キャラクターID
          schema: {type: string}
          required: true
      responses:
        200:
          description: "成功"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'

  /book:
    get:
      operationId: get_book_list
      summary: getBookList
      description: 同人誌を取得する
      tags: ["book"]
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  characters:
                    $ref: '#/components/schemas/BookBaseMulti'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      operationId: create_book
      summary: createBook
      description: 同人誌を新規登録する
      tags: ["book"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
            example:
              author: "1"
              circle: "1"
              series: "1"
              originals: 
              - "1"
              - "2"
              characters:
              - "1"
              - "2"
              released_event: "1"
              released_at: "2024-04-29T12:49:22.224Z"
              purchased_at: "2024-04-29T12:49:22.224Z"
              name: "なんかうすいほん"
              memo: "とうほうのうすそうでうすくないほん"
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookBase'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/ServerError'

  /book/{book_id}:
    get:
      operationId: get_book
      summary: getBook
      description: 同人誌情報を取得する
      tags: ["book"]
      parameters:
        - name: book_id
          in: path
          description: 同人誌ID
          schema: {type: string}
          required: true
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    put:
      operationId: update_book
      summary: updateBook
      description: 同人誌情報を更新する
      tags: ["book"]
      parameters:
        - name: book_id
          in: path
          description: 同人誌ID
          schema: {type: string}
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
            example:
              author: "1"
              circle: "1"
              series: "1"
              originals: 
              - "1"
              - "2"
              characters:
              - "1"
              - "2"
              released_event: "1"
              released_at: "2024-04-29T12:49:22.224Z"
              purchased_at: "2024-04-29T12:49:22.224Z"
              name: "なんかうすいほん"
              memo: "とうほうのうすそうでうすくないほん"
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookBase'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: delete_book
      summary: deleteBook
      description: 同人誌を削除する
      tags: ["book"]
      parameters:
        - name: book_id
          in: path
          description: 同人誌ID
          schema: {type: string}
          required: true
      responses:
        200:
          description: "成功"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'

  /bookseries:
    get:
      operationId: get_book_series_list
      summary: getBookSeriesList
      description: 同人誌シリーズを取得する
      tags: ["book"]
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  characters:
                    $ref: '#/components/schemas/BookSeriesBaseMulti'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      operationId: create_book_series
      summary: createBookSeries
      description: 同人誌シリーズを新規登録する
      tags: ["book"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookSeries'
            example:
              name: "うすいほんしりーず"
              original: "1"
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookSeriesBase'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/ServerError'

  /bookseries/{book_series_id}:
    get:
      operationId: get_book_series
      summary: getBookSeries
      description: 同人誌シリーズ情報を取得する
      tags: ["book"]
      parameters:
        - name: book_series_id
          in: path
          description: 同人誌シリーズID
          schema: {type: string}
          required: true
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  characters:
                    $ref: '#/components/schemas/BookSeries'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    put:
      operationId: update_series_book
      summary: updateSeriesBook
      description: 同人誌シリーズ情報を更新する
      tags: ["book"]
      parameters:
        - name: book_series_id
          in: path
          description: 同人誌シリーズID
          schema: {type: string}
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookSeries'
            example:
              name: "うすいほんしりーず"
              original: "1"
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookSeriesBase'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: delete_book_series
      summary: deleteBookSeries
      description: 同人誌シリーズを削除する
      tags: ["book"]
      parameters:
        - name: book_series_id
          in: path
          description: 同人誌シリーズID
          schema: {type: string}
          required: true
      responses:
        200:
          description: "成功"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'

  /book/{book_id}/image:
    get:
      operationId: get_book_cover_image
      summary: getBookCoverImage
      description: |
        同人誌の表紙画像を取得する
        /book/{book_id}/image/1と同じ
      tags: ["book"]
      parameters:
        - name: book_id
          in: path
          description: 同人誌ID
          schema: {type: string}
          required: true
      responses:
        200:
          description: "成功"
          content:
            image/png:
              schema: 
               type: string
               format: binary
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: delete_book_all_images
      summary: deleteBookAllImages
      description: 同人誌の画像をすべて削除する
      tags: ["book"]
      parameters:
        - name: book_id
          in: path
          description: 同人誌ID
          schema: {type: string}
          required: true
      responses:
        200:
          description: "成功"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'

  /book/{book_id}/image/{page}:
    get:
      operationId: get_book_image
      summary: getBookImage
      description: 同人誌の画像を取得する
      tags: ["book"]
      parameters:
        - name: book_id
          in: path
          description: 同人誌ID
          schema: {type: string}
          required: true
        - name: page
          in: path
          description: ページ
          schema: {type: integer}
          required: true
      responses:
        200:
          description: "成功"
          content:
            image/png:
              schema: 
               type: string
               format: binary
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      operationId: upload_book_image
      summary: uploadBookImage
      description: 同人誌の画像をアップロードする
      tags: ["book"]
      parameters:
        - name: book_id
          in: path
          description: 同人誌ID
          schema: {type: string}
          required: true
        - name: page
          in: path
          description: ページ
          schema: {type: integer}
          required: true
      responses:
        200:
          description: "成功"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/ServerError'
    put:
      operationId: update_book_image
      summary: updateBookImage
      description: 同人誌の画像を更新する
      tags: ["book"]
      parameters:
        - name: book_id
          in: path
          description: 同人誌ID
          schema: {type: string}
          required: true
        - name: page
          in: path
          description: ページ
          schema: {type: integer}
          required: true
      responses:
        200:
          description: "成功"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: delete_book_image
      summary: deleteBookImage
      description: 同人誌の画像を削除する
      tags: ["book"]
      parameters:
        - name: book_id
          in: path
          description: 同人誌ID
          schema: {type: string}
          required: true
        - name: page
          in: path
          description: ページ
          schema: {type: integer}
          required: true
      responses:
        200:
          description: "成功"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/ServerError'

  /book/search:
    get:
      operationId: search_books
      summary: searchBooks
      description: 同人誌を検索する
      tags: ["book"]
      parameters:
        - name: author
          in: query
          description: 著者名(部分一致)
          schema:
            type: string
            format: byte
        - name: circle
          in: query
          description: サークル名(部分一致)
          schema:
            type: string
            format: byte 
        - name: event
          in: query
          description: イベント名(部分一致)
          schema:
            type: string
            format: byte
        - name: original
          in: query
          description: 原作名(部分一致)
          schema:
            type: string
            format: byte
        - name: character
          in: query
          description: キャラクター名(部分一致)
          schema:
            type: string
            format: byte
        - name: released_from
          in: query
          description: リリース日範囲From
          schema:
            type: string
            pattern: "YYYYMMDD"
        - name: released_to
          in: query
          description: リリース日範囲To
          schema:
            type: string
            pattern: "YYYYMMDD"
        - name: purchased_from
          in: query
          description: 購入日範囲From
          schema:
            type: string
            pattern: "YYYYMMDD"
        - name: purchased_to
          in: query
          description: 購入日範囲To
          schema:
            type: string
            pattern: "YYYYMMDD"
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  characters:
                    $ref: '#/components/schemas/BookBaseMulti'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/ServerError'


tags:
  - name: "author"
    description: 著者
  - name: "circle"
    description: サークル
  - name: event
    description: イベント(即売会)
  - name: "original"
    description: 原作
  - name: "character"
    description: キャラクター
  - name: "book"
    description: 同人誌


components:
  schemas:
    AuthorBase:
      type: object
      additionalProperties:
        type: string
      description: |
        Keyがauthor_id、Valueが著者名
      example:
        1: "ScTi"
    AuthorBaseMulti:
      type: object
      additionalProperties:
        type: string
      description: |
        Keyがauthor_id、Valueが著者名
      example:
        1: "ScTi"
        2: "ガガンボ"
    Author:
      type: object
      properties:
        name: {type: string}
        memo: {type: string}
        created_at: 
          type: string
          format: date-time
        updated_at: 
          type: string
          format: date-time
        author_alias: 
          $ref: '#/components/schemas/AuthorBaseMulti'
    CircleBase:
      type: object
      additionalProperties:
        type: string
      description: |
        Keyがcircle_id、Valueがサークル名
      example:
        1: "元素評論部族"
    CircleBaseMulti:
      type: object
      additionalProperties:
        type: string
      description: |
        Keyがcircle_id、Valueがサークル名
      example:
        1: "元素評論部族"
        2: "ニセキノコモドキ"
    Circle:
      type: object
      properties:
        name: {type: string}
        memo: {type: string}
        created_at: 
          type: string
          format: date-time
        updated_at: 
          type: string
          format: date-time
        authors:
          $ref: '#/components/schemas/AuthorBaseMulti'
        circle_alias: 
          $ref: '#/components/schemas/CircleBaseMulti'
    EventBase:
      type: object
      additionalProperties:
        type: string
      description: |
        Keyがevent_id、Valueがイベント名
      example:
        1: "第一回博麗神社例大祭"
    EventBaseMulti:
      type: object
      additionalProperties:
        type: string
      description: |
        Keyがevent_id、Valueがイベント名
      example:
        1: "第一回博麗神社例大祭"
        2: "第二回博麗神社例大祭"
    Event:
      type: object
      properties:
        name: {type: string}
        memo: {type: string}
        heldAt:
          type: string
          format: date-time
        location: {type: string}
        created_at: 
          type: string
          format: date-time
        updated_at: 
          type: string
          format: date-time
        event_series:
          $ref: '#/components/schemas/EventSeriesBase'
    EventSeriesBase:
      type: object
      additionalProperties:
        type: string
      description: |
        Keyがevent_series_id、Valueがイベントシリーズ名
      example:
        1: "博麗神社例大祭"
    EventSeriesBaseMulti:
      type: object
      additionalProperties:
        type: string
      description: |
        Keyがevent_series_id、Valueがイベントシリーズ名
      example:
        1: "博麗神社例大祭"
        2: "割るのです"
    EventSeries:
      type: object
      properties:
        name: {type: string}
        memo: {type: string}
        created_at: 
          type: string
          format: date-time
        updated_at: 
          type: string
          format: date-time
    OriginalBase:
      type: object
      additionalProperties:
        type: string
      description: |
        Keyがoriginal_id、Valueが原作名
      example:
        1: "東方"
    OriginalBaseMulti:
      type: object
      additionalProperties:
        type: string
      description: |
        Keyがoriginal_id、Valueが原作名
      example:
        1: "東方"
        2: "千年戦争アイギス"
    Original:
      type: object
      properties:
        name: {type: string}
        memo: {type: string}
        parent_original: 
          $ref: '#/components/schemas/OriginalBase'
        created_at: 
          type: string
          format: date-time
        updated_at: 
          type: string
          format: date-time
    CharacterBase:
      type: object
      additionalProperties:
        type: string
      description: |
        Keyがcharacter_id、Valueがキャラクター名
      example:
        1: "古明地さとり"
    CharacterBaseMulti:
      type: object
      additionalProperties:
        type: string
      description: |
        Keyがcharacter_id、Valueがキャラクター名
      example:
        1: "古明地さとり"
        2: "古明地こいし"
    Character:
      type: object
      properties:
        name: {type: string}
        memo: {type: string}
        original: 
          $ref: '#/components/schemas/OriginalBase'
        created_at: 
          type: string
          format: date-time
        updated_at: 
          type: string
          format: date-time
    BookBase:
      type: object
      additionalProperties:
        type: string
      description: |
        Keyがbook_id、Valueが同人誌名
      example:
        1: "なんかうすいほん"    
    BookBaseMulti:
      type: object
      additionalProperties:
        type: string
      description: |
        Keyがbook_id、Valueが同人誌名
      example:
        1: "なんかうすいほん"
        2: "暑くて干からびそう"
    Book:
      type: object
      properties:
        author:
          $ref: '#/components/schemas/AuthorBase'
        circle:
          $ref: '#/components/schemas/CircleBase'
        series:
          $ref: '#/components/schemas/BookSeriesBase'
        originals:
          $ref: '#/components/schemas/OriginalBaseMulti'
        characters: 
          $ref: '#/components/schemas/CharacterBaseMulti'
        released_event:
          $ref: '#/components/schemas/EventBase'
        released_at:
          type: string
          format: date-time
        purchased_at:
          type: string
          format: date-time
        name: {type: string}
        memo: {type: string}
        created_at: 
          type: string
          format: date-time
        updated_at: 
          type: string
          format: date-time
    BookSeriesBase:
      type: object
      additionalProperties:
        type: string
      description: |
        Keyがbook_series_id、Valueが同人誌シリーズ名
      example:
        1: "うすいほんしりーず" 
    BookSeriesBaseMulti:
      type: object
      additionalProperties:
        type: string
      description: |
        Keyがbook_series_id、Valueが同人誌シリーズ名
      example:
        1: "うすいほんしりーず" 
        2: "暑くて干からびそうシリーズ"
    BookSeries:
      type: object
      properties:
        name: {type: string}
        created_at: 
          type: string
          format: date-time
        updated_at: 
          type: string
          format: date-time

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    
  
  responses:
    UnauthorizedError:
      description: トークンが無効もしくは期限切れ
    ForbiddenError:
      description: アクセス拒否
    NotFoundError:
      description: 存在しない
    ServerError:
      description: サーバエラー